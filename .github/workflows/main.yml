name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    # 2760 minutos = 46 horas
    runs-on: windows-latest
    timeout-minutes: 2760

    steps:
      - name: üßπ Limpar espa√ßo e preparar o sistema
        shell: pwsh
        run: |
          Write-Host "==== Limpando arquivos in√∫teis ===="
          Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
          Stop-Service -Name bits -Force -ErrorAction SilentlyContinue

          $paths = @(
            "C:\Program Files (x86)\Microsoft Visual Studio",
            "C:\Program Files\Microsoft Visual Studio",
            "C:\ProgramData\chocolatey",
            "C:\Program Files\dotnet",
            "C:\hostedtoolcache",
            "C:\Users\runneradmin\AppData\Local\Temp",
            "C:\Users\runneradmin\AppData\Roaming\npm"
          )

          foreach ($p in $paths) {
              if (Test-Path $p) {
                  try {
                    Remove-Item -Path $p -Recurse -Force -ErrorAction Stop
                    Write-Host "Removido: $p"
                  } catch {
                    Write-Warning "Falha ao remover $p ‚Äî pulando: $_"
                  }
              }
          }

          powercfg -h off
          vssadmin delete shadows /all /quiet
          wevtutil cl System
          wevtutil cl Application
          # Limpa Lixeira (pode requerer permiss√µes elevadas)
          try {
            Clear-RecycleBin -Force -ErrorAction Stop
          } catch {
            Write-Warning "N√£o foi poss√≠vel limpar a lixeira: $_"
          }

          # Mostrar espa√ßo livre em C:
          $c = Get-PSDrive -Name C
          Write-Host "Espa√ßo livre atual (C:) - Free: $($c.Free)  Used: $($c.Used)  Total: $($c.Used + $c.Free)"

      - name: ‚öôÔ∏è Ativar RDP
        shell: pwsh
        run: |
          # Habilita RDP, desativa NLA (se necess√°rio) e abre firewall
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue

      - name: üë§ Criar usu√°rio RDP
        shell: pwsh
        run: |
          # Gera senha segura aleat√≥ria
          $chars = [char[]](33..126)
          $password = -join ((1..18) | ForEach-Object { $chars | Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Cria usu√°rio local e adiciona aos grupos
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -Description "Conta de Acesso RDP"
          } else {
            Write-Host "Usu√°rio RDP j√° existe ‚Äî atualizando senha."
            Set-LocalUser -Name "RDP" -Password $securePass
          }

          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue

          # Exporta pro GITHUB_ENV de forma segura
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASSWORD=$password"

      - name: üåê Instalar Tailscale (para conectar)
        shell: pwsh
        env:
          # garante que GitHub fa√ßa a substitui√ß√£o do secret antes do passo rodar
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
            Write-Error "Secret TAILSCALE_AUTH_KEY n√£o encontrado. Adicione-o nas configura√ß√µes do reposit√≥rio."
            exit 1
          }

          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup.msi"
          $installerPath = Join-Path $env:TEMP "tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue

          $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
            Write-Error "Tailscale n√£o encontrado em $tsExe"
            exit 1
          }

          # Substitui a expans√£o de vari√°vel do PowerShell de maneira segura para hostname
          & $tsExe up --authkey "${env:TAILSCALE_AUTH_KEY}" --hostname "rdp-46h-$($env:GITHUB_RUN_ID)"
          $tsIP = (& $tsExe ip -4) -join "`n"
          $tsIP = $tsIP.Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: üîÑ Manter RDP ativo (loop ‚Äî ser√° encerrado quando o job expirar)
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ATIVO ==="
          Write-Host "IP (Tailscale): $env:TAILSCALE_IP"
          Write-Host "Usu√°rio: RDP"
          Write-Host "Senha: $env:RDP_PASSWORD"
          Write-Host "=================`n"
          # Loop que mant√©m o job ativo at√© o timeout do job (timeout-minutes)
          while ($true) {
              Write-Host "[$(Get-Date -Format o)] RDP ativo ‚Äî pr√≥ximo check em 5 minutos..."
              Start-Sleep -Seconds 300
          }
